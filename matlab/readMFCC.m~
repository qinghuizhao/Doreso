train_path = '~/tiger/data/splited/PandoraSubset/mfcc/trainset_splited/' ; 
test_path =  '~/tiger/data/splited/PandoraSubset/mfcc/testset_splited/' ;
validation_path = '~/tiger/data/splited/PandoraSubset/mfcc/validationset_splited/'

train_label = [train_path,'tz_label.txt'];

filelist = getAllFiles([train_path,'train/']);

if nargin<3 
    blocksize = 100;
    hopsize = 50;
end
train_mfcc_y = readfile(train_label);

for i = 1: length(filelist)
    filelines = readfile(filelist{i});
    train_mfcc_x{i} = filelines;
end



%% testphase
labelname = [test_path,'tz_label.txt'];
label = readfile(labelname);
%}
testname = [test_path,'test/'];

testfiles = getAllFiles(testname);

correct = 0 ;
for i = 1:length(testfiles)
    test_input = [];
    test_label = [];
	temp_test = readfile(testfiles{i});
    
    len = size(temp_test,1);
    for j = 1:hopsize:len
        if j + blocksize <= len
            m = mean(temp_test(j:j+blocksize,:));
            var = std(temp_test(j:j+blocksize,:));
            com = [m,var];
            test_input = [test_input;com];
            test_label = [test_label;label(i)];
        end
    end
    if normal
        test_input = z_score(test_input,tr_minim,tr_maxim);
    end
	[predict,acc,prob] = svmpredict(test_label,test_input,SVMstruct,'-b 1');
    
    ignore = [];
    for j = 1:length(predict)
%         l = predict(j);
%         if l == 10 
%             continue;
%         end
%         [start,over] = equalsum(l);
%         if mean(prob(j,start:over))<0.4
%             ignore = [ignore,j];
%         end
        if prob(j,predict(j)) < thres
            ignore = [ignore,j];
        end
    end
    predict(ignore) = [];
    %}
	if mode(predict) == label(i)
		correct = correct + 1;
 	end
end

correct_rate = correct / length(testfiles);